name: Generate GitHub Traffic Badges

on:
  schedule:
    - cron: "0 0 * * *" # Runs daily at midnight UTC to collect new data
  workflow_dispatch: # Allows manual triggering

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Required to commit changes to the repository
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch all history to ensure the script has the full context.
          fetch-depth: 0

      - name: Generate and Commit Traffic Data
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const badgeDir = '.github/badges';
            const historyFile = '.github/traffic_history.json';
            const branch = context.ref.replace('refs/heads/', '');

            /**
             * Fetches a file's content and SHA from the repository.
             * @param {string} filePath - The path to the file in the repo.
             * @returns {Promise<{content: string|null, sha: string|null}>}
             */
            async function getFile(filePath) {
              try {
                const response = await github.rest.repos.getContent({
                  owner,
                  repo,
                  path: filePath,
                  ref: branch,
                });
                if (response.data && response.data.content) {
                  return {
                    content: Buffer.from(response.data.content, 'base64').toString('utf8'),
                    sha: response.data.sha
                  };
                }
                return { content: null, sha: null };
              } catch (error) {
                if (error.status === 404) {
                  return { content: null, sha: null }; // File doesn't exist, a valid case.
                }
                console.error(`Error getting file ${filePath}:`, error);
                throw error;
              }
            }

            /**
             * Commits a file to the repository, creating or updating it.
             * @param {string} filePath - The path for the file.
             * @param {string} content - The new content of the file.
             * @param {string} message - The commit message.
             * @param {string|null} sha - The SHA of the existing file, or null to create a new one.
             */
            async function commitFile(filePath, content, message, sha) {
              await github.rest.repos.createOrUpdateFileContents({
                owner,
                repo,
                path: filePath,
                message: message,
                content: Buffer.from(content).toString('base64'),
                sha: sha,
                branch: branch,
              });
            }

            /**
             * Creates a themed SVG badge.
             * @param {string} label - The text for the left part of the badge.
             * @param {string} message - The text for the right part of the badge.
             * @param {string} color - The background color for the message part.
             * @returns {string} - The SVG content as a string.
             */
            function createBadgeSvg(label, message, color) {
              const labelWidth = label.length * 7 + 12;
              const messageWidth = message.length * 7.5 + 12;
              const totalWidth = labelWidth + messageWidth;

              const labelBgColor = '#4C566A';
              const textColor = '#ECEFF4';
              const shadowColor = '#2E3440';

              return `
                <svg xmlns="http://www.w3.org/2000/svg" width="${totalWidth}" height="20" role="img" aria-label="${label}: ${message}">
                  <title>${label}: ${message}</title>
                  <linearGradient id="s" x2="0" y2="100%">
                    <stop offset="0" stop-color="#bbb" stop-opacity=".1"/>
                    <stop offset="1" stop-opacity=".1"/>
                  </linearGradient>
                  <clipPath id="r"><rect width="${totalWidth}" height="20" rx="3" fill="#fff"/></clipPath>
                  <g clip-path="url(#r)">
                    <rect width="${labelWidth}" height="20" fill="${labelBgColor}"/>
                    <rect x="${labelWidth}" width="${messageWidth}" height="20" fill="${color}"/>
                    <rect width="${totalWidth}" height="20" fill="url(#s)"/>
                  </g>
                  <g fill="${textColor}" text-anchor="middle" font-family="Verdana,Geneva,DejaVu Sans,sans-serif" text-rendering="geometricPrecision" font-size="110">
                    <text aria-hidden="true" x="${(labelWidth / 2) * 10}" y="150" fill="${shadowColor}" fill-opacity=".3" transform="scale(.1)" textLength="${(labelWidth - 10) * 10}">${label}</text>
                    <text x="${(labelWidth / 2) * 10}" y="140" transform="scale(.1)" textLength="${(labelWidth - 10) * 10}">${label}</text>
                    <text aria-hidden="true" x="${(labelWidth + messageWidth / 2) * 10}" y="150" fill="${shadowColor}" fill-opacity=".3" transform="scale(.1)" textLength="${(messageWidth - 10) * 10}">${message}</text>
                    <text x="${(labelWidth + messageWidth / 2) * 10}" y="140" transform="scale(.1)" textLength="${(messageWidth - 10) * 10}">${message}</text>
                  </g>
                </svg>
              `;
            }

            // Main execution logic
            try {
              // --- 1. Load historical data ---
              console.log(`Loading historical data from ${historyFile} on branch ${branch}...`);
              const historyFileState = await getFile(historyFile);
              let historicalData = { clones: {}, views: {}, releases: { total_downloads: 0, by_release: {} } };
              if (historyFileState.content) {
                const loadedData = JSON.parse(historyFileState.content);
                historicalData.clones = loadedData.clones || {};
                historicalData.views = loadedData.views || {};
                historicalData.releases = loadedData.releases || { total_downloads: 0, by_release: {} };
                console.log('Successfully loaded existing historical data.');
              } else {
                console.log('No historical data file found. A new one will be created.');
              }

              // --- 2. Fetch new traffic and release data ---
              console.log('Fetching latest traffic data from GitHub API...');
              const { data: clonesResponse } = await github.rest.repos.getClones({ owner, repo, per: 'day' });
              const { data: viewsResponse } = await github.rest.repos.getViews({ owner, repo, per: 'day' });

              console.log('Fetching release download counts...');
              const releases = await github.paginate(github.rest.repos.listReleases, { owner, repo });

              // This object will hold the fresh data from the API
              const newApiData = {
                  total_downloads: 0,
                  by_release: {}
              };

              for (const release of releases) {
                let releaseTotal = 0;
                const assetsData = {};
                for (const asset of release.assets) {
                  releaseTotal += asset.download_count;
                  assetsData[asset.name] = asset.download_count;
                }

                if (release.tag_name) {
                    newApiData.by_release[release.tag_name] = {
                        total_downloads: releaseTotal,
                        assets: assetsData
                    };
                }
                newApiData.total_downloads += releaseTotal;
              }

              // --- 3. Accumulate Download Counts (NEW LOGIC) ---
              console.log('Calculating new cumulative download counts...');
              let cumulativeTotalDownloads = historicalData.releases.total_downloads || 0;
              const cumulativeReleasesData = historicalData.releases.by_release || {};

              // Iterate over the releases found in the latest API call
              for (const [tagName, newReleaseData] of Object.entries(newApiData.by_release)) {
                  const oldReleaseTotal = cumulativeReleasesData[tagName]?.total_downloads || 0;
                  const newReleaseTotal = newReleaseData.total_downloads;

                  // Calculate the difference, ensuring it's not negative
                  const diff = Math.max(0, newReleaseTotal - oldReleaseTotal);
                  
                  if (diff > 0) {
                      console.log(`Release ${tagName} has ${diff} new downloads.`);
                      cumulativeTotalDownloads += diff;
                  }
                  
                  // Always update the release data with the latest from the API
                  cumulativeReleasesData[tagName] = newReleaseData;
              }
              
              // This ensures that if the overall total from the API is higher for any reason 
              // (e.g., a new release not accounted for), we take the higher value.
              cumulativeTotalDownloads = Math.max(cumulativeTotalDownloads, newApiData.total_downloads);

              // Update historical data with the new cumulative totals
              historicalData.releases = {
                  total_downloads: cumulativeTotalDownloads,
                  by_release: cumulativeReleasesData
              };

              // --- 4. Update historical traffic data (Clones and Views) ---
              console.log('Merging new traffic data with historical data...');
              clonesResponse.clones.forEach(day => {
                const date = day.timestamp.split('T')[0];
                historicalData.clones[date] = { count: day.count, uniques: day.uniques };
              });
              viewsResponse.views.forEach(day => {
                const date = day.timestamp.split('T')[0];
                historicalData.views[date] = { count: day.count, uniques: day.uniques };
              });

              // --- 5. Calculate all-time totals for badges ---
              const allTimeTotalClones = Object.values(historicalData.clones).reduce((sum, day) => sum + day.count, 0);
              const allTimeUniqueCloners = Object.values(historicalData.clones).reduce((sum, day) => sum + day.uniques, 0);
              const allTimeTotalViews = Object.values(historicalData.views).reduce((sum, day) => sum + day.count, 0);
              const allTimeUniqueVisitors = Object.values(historicalData.views).reduce((sum, day) => sum + day.uniques, 0);
              const allTimeTotalDownloads = historicalData.releases.total_downloads;

              console.log(`All-Time Clones: Total=${allTimeTotalClones}, Unique (sum of daily uniques)=${allTimeUniqueCloners}`);
              console.log(`All-Time Views: Total=${allTimeTotalViews}, Unique (sum of daily uniques)=${allTimeUniqueVisitors}`);
              console.log(`All-Time Release Downloads (Cumulative): Total=${allTimeTotalDownloads}`);
              if (historicalData.releases.by_release) {
                console.log('Downloads by Release:');
                for (const [tagName, data] of Object.entries(historicalData.releases.by_release)) {
                    console.log(`- ${tagName}: ${data.total_downloads} downloads`);
                }
              }

              // --- 6. Generate new badge SVGs ---
              const clonesBadgeSvg = createBadgeSvg('Clones', `${allTimeTotalClones} (Unique: ${allTimeUniqueCloners})`, '#8FBCBB');
              const viewsBadgeSvg = createBadgeSvg('Views', `${allTimeTotalViews} (Unique: ${allTimeUniqueVisitors})`, '#88C0D0');
              const totalDownloadsBadgeSvg = createBadgeSvg('Total Downloads', `${allTimeTotalDownloads}`, '#A3BE8C');
              
              const releaseBadgesSvgs = {};
              if (historicalData.releases.by_release) {
                  for (const [tagName, data] of Object.entries(historicalData.releases.by_release)) {
                      const badgeLabel = `Release ${tagName}`;
                      const badgeMessage = `${data.total_downloads} downloads`;
                      releaseBadgesSvgs[tagName] = createBadgeSvg(badgeLabel, badgeMessage, '#B48EAD');
                  }
              }

              // --- 7. Commit all files ---
              console.log('Committing updated files to the repository...');
              const newHistoryContent = JSON.stringify(historicalData, null, 2);
              if (newHistoryContent !== historyFileState.content) {
                await commitFile(historyFile, newHistoryContent, 'feat: Update GitHub traffic and downloads history', historyFileState.sha);
                console.log(`- Committed ${historyFile}`);

                // Get SHAs for existing badges before committing
                const clonesBadgeState = await getFile(`${badgeDir}/clones_badge.svg`);
                const viewsBadgeState = await getFile(`${badgeDir}/views_badge.svg`);
                const totalDownloadsBadgeState = await getFile(`${badgeDir}/total_downloads_badge.svg`);

                // Commit main badges
                await commitFile(`${badgeDir}/clones_badge.svg`, clonesBadgeSvg, 'feat: Update clones traffic badge', clonesBadgeState.sha);
                console.log(`- Committed ${badgeDir}/clones_badge.svg`);
                await commitFile(`${badgeDir}/views_badge.svg`, viewsBadgeSvg, 'feat: Update views traffic badge', viewsBadgeState.sha);
                console.log(`- Committed ${badgeDir}/views_badge.svg`);
                await commitFile(`${badgeDir}/total_downloads_badge.svg`, totalDownloadsBadgeSvg, 'feat: Update total downloads badge', totalDownloadsBadgeState.sha);
                console.log(`- Committed ${badgeDir}/total_downloads_badge.svg`);

                // Commit release-specific badges
                for (const [tagName, svgContent] of Object.entries(releaseBadgesSvgs)) {
                    const safeTagName = tagName.replace(/[^a-zA-Z0-9.-]/g, '_');
                    const badgePath = `${badgeDir}/release_${safeTagName}_badge.svg`;
                    const badgeState = await getFile(badgePath);
                    await commitFile(badgePath, svgContent, `feat: Update download badge for release ${tagName}`, badgeState.sha);
                    console.log(`- Committed ${badgePath}`);
                }
                console.log('✅ Traffic badges, download counts, and history updated successfully!');
              } else {
                console.log('✅ No changes detected in traffic or download data. Nothing to commit.');
              }

            } catch (error) {
              console.error('Error during workflow execution:', error);
              core.setFailed(`Action failed with error: ${error.message}`);
            }
