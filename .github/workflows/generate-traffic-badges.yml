# .github/workflows/generate-traffic-badges.yml

name: Generate GitHub Traffic Badges

on:
  schedule:
    - cron: "0 0 * * *" # Runs daily at midnight UTC to collect new data
  workflow_dispatch: # Allows manual triggering

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # This is important for the action to be able to commit changes
          # and fetch the existing history.
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0 # Fetch all history to read existing traffic_history.json

      - name: Fetch and Generate Badges
        id: generate_badges
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const owner = 'chinmay-sawant';
            const repo = 'MotionSaver';
            const badgeDir = '.github/badges'; // Directory to store badges
            const historyFile = '.github/traffic_history.json'; // File to store historical data

            // Function to create an SVG badge with a "Linux type" dark theme
            function createBadgeSvg(label, message, color) {
                const labelLength = label.length;
                const messageLength = message.length;

                // Adjust width calculation for better fit with different fonts/sizes
                const labelWidth = labelLength * 7 + 12;
                const messageWidth = messageLength * 7 + 12;
                const totalWidth = labelWidth + messageWidth;

                // "Linux type" theme colors (inspired by Nord/Dracula/Gruvbox palettes)
                const primaryBgColor = '#3B4252'; // Dark gray-blue (Nord's `nord3`)
                const labelBgColor = '#4C566A';   // Slightly lighter gray-blue (Nord's `nord2`)
                const textColor = '#ECEFF4';      // Light almost-white (Nord's `nord6`)
                const shadowColor = '#2E3440';    // Darker shadow (Nord's `nord0`)

                return `
                    <svg xmlns="http://www.w3.org/2000/svg" width="${totalWidth}" height="20" role="img" aria-label="${label}: ${message}">
                        <title>${label}: ${message}</title>
                        <linearGradient id="s" x2="0" y2="100%">
                            <stop offset="0" stop-color="#bbb" stop-opacity=".1"/>
                            <stop offset="1" stop-opacity=".1"/>
                        </linearGradient>
                        <clipPath id="r"><rect width="${totalWidth}" height="20" rx="3" fill="#fff"/></clipPath>
                        <g clip-path="url(#r)">
                            <!-- Overall background for the badge -->
                            <rect width="${totalWidth}" height="20" fill="${primaryBgColor}"/>
                            <!-- Background for the label section -->
                            <rect width="${labelWidth}" height="20" fill="${labelBgColor}"/>
                            <!-- Background for the message section (uses dynamic color) -->
                            <rect x="${labelWidth}" width="${messageWidth}" height="20" fill="${color}"/>
                            <!-- Gradient overlay for subtle effect -->
                            <rect width="${totalWidth}" height="20" fill="url(#s)"/>
                        </g>
                        <g fill="${textColor}" text-anchor="middle" font-family="Verdana,Geneva,DejaVu Sans,sans-serif" text-rendering="geometricPrecision" font-size="110">
                            <!-- Shadow text for depth -->
                            <text aria-hidden="true" x="${(labelWidth / 2) * 10}" y="150" fill="${shadowColor}" fill-opacity=".3" transform="scale(.1)" textLength="${(labelWidth - 12) * 10}">${label}</text>
                            <!-- Main label text -->
                            <text x="${(labelWidth / 2) * 10}" y="140" transform="scale(.1)" textLength="${(labelWidth - 12) * 10}">${label}</text>
                            <!-- Shadow text for depth -->
                            <text aria-hidden="true" x="${(labelWidth + messageWidth / 2) * 10}" y="150" fill="${shadowColor}" fill-opacity=".3" transform="scale(.1)" textLength="${(messageWidth - 12) * 10}">${message}</text>
                            <!-- Main message text -->
                            <text x="${(labelWidth + messageWidth / 2) * 10}" y="140" transform="scale(.1)" textLength="${(messageWidth - 12) * 10}">${message}</text>
                        </g>
                    </svg>
                `;
            }

            let historicalData = { clones: {}, views: {} };
            let historyFileSha = undefined; // To store SHA of history file if it exists

            // Try to fetch existing historical data
            try {
                const { data } = await github.rest.repos.getContent({
                    owner,
                    repo,
                    path: historyFile,
                    ref: github.context.sha
                });
                historicalData = JSON.parse(Buffer.from(data.content, 'base64').toString('utf8'));
                historyFileSha = data.sha; // Store the SHA
                console.log('Loaded existing historical data.');
            } catch (error) {
                if (error.status === 404) {
                    console.log('No existing historical data file found. Starting fresh.');
                } else {
                    console.error('Error loading historical data:', error);
                }
            }

            try {
                // Fetch clones data (last 14 days)
                const clonesResponse = await github.rest.repos.getClones({ owner, repo, per: 'day' });
                const currentClones = clonesResponse.data.clones;

                // Fetch views data (last 14 days)
                const viewsResponse = await github.rest.repos.getViews({ owner, repo, per: 'day' });
                const currentViews = viewsResponse.data.views;

                // Update historical data with new daily entries
                currentClones.forEach(day => {
                    const date = day.timestamp.split('T')[0]; // Get YYYY-MM-DD
                    historicalData.clones[date] = { count: day.count, uniques: day.uniques };
                });
                currentViews.forEach(day => {
                    const date = day.timestamp.split('T')[0]; // Get YYYY-MM-DD
                    historicalData.views[date] = { count: day.count, uniques: day.uniques };
                });

                // Calculate all-time totals
                let allTimeTotalClones = 0;
                let allTimeUniqueClonersCount = 0; // Sum of daily uniques (approximation)
                Object.values(historicalData.clones).forEach(day => {
                    allTimeTotalClones += day.count;
                    allTimeUniqueClonersCount += day.uniques;
                });

                let allTimeTotalViews = 0;
                let allTimeUniqueVisitorsCount = 0; // Sum of daily uniques (approximation)
                Object.values(historicalData.views).forEach(day => {
                    allTimeTotalViews += day.count;
                    allTimeUniqueVisitorsCount += day.uniques;
                });

                console.log(`All-Time Clones: Total=${allTimeTotalClones}, Unique=${allTimeUniqueClonersCount}`);
                console.log(`All-Time Views: Total=${allTimeTotalViews}, Unique=${allTimeUniqueVisitorsCount}`);

                // Generate SVG badges with all-time totals
                const clonesBadgeSvg = createBadgeSvg('Clones', `${allTimeTotalClones} (Unique: ${allTimeUniqueClonersCount})`, '#8FBCBB');
                const viewsBadgeSvg = createBadgeSvg('Views', `${allTimeTotalViews} (Unique: ${allTimeUniqueVisitorsCount})`, '#88C0D0');

                // Commit the updated historical data file
                const historyContent = JSON.stringify(historicalData, null, 2);
                await github.rest.repos.createOrUpdateFileContents({
                    owner,
                    repo,
                    path: historyFile,
                    message: 'feat: Update GitHub traffic history',
                    content: Buffer.from(historyContent).toString('base64'),
                    sha: historyFileSha // Use the stored SHA, will be undefined for new file
                });

                // Get SHAs for badge files
                let clonesBadgeSha = undefined;
                try {
                    const { data } = await github.rest.repos.getContent({ owner, repo, path: `${badgeDir}/clones_badge.svg`, ref: github.context.sha });
                    clonesBadgeSha = data.sha;
                } catch (error) { /* file not found, sha remains undefined */ }

                let viewsBadgeSha = undefined;
                try {
                    const { data } = await github.rest.repos.getContent({ owner, repo, path: `${badgeDir}/views_badge.svg`, ref: github.context.sha });
                    viewsBadgeSha = data.sha;
                } catch (error) { /* file not found, sha remains undefined */ }


                // Create or update badge files
                await github.rest.repos.createOrUpdateFileContents({
                    owner,
                    repo,
                    path: `${badgeDir}/clones_badge.svg`,
                    message: 'feat: Update clones traffic badge',
                    content: Buffer.from(clonesBadgeSvg).toString('base64'),
                    sha: clonesBadgeSha
                });

                await github.rest.repos.createOrUpdateFileContents({
                    owner,
                    repo,
                    path: `${badgeDir}/views_badge.svg`,
                    message: 'feat: Update views traffic badge',
                    content: Buffer.from(viewsBadgeSvg).toString('base64'),
                    sha: viewsBadgeSha
                });

                console.log('Traffic badges and history updated successfully!');

            } catch (error) {
                console.error('Error fetching or generating traffic data:', error);
                core.setFailed(`Action failed with error: ${error.message}`);
            }

      - name: Commit generated badges and history (if not already committed by github-script)
        uses: EndBug/add-and-commit@v9
        with:
          add: |
            .github/badges/*.svg
            .github/traffic_history.json
          message: "Automated: Update GitHub traffic badges and history"
          committer_name: GitHub Actions
          committer_email: actions@github.com
          github_token: ${{ secrets.GH_TOKEN }}
