# .github/workflows/generate-traffic-badges.yml

name: Generate GitHub Traffic Badges

on:
  schedule:
    - cron: "0 * * * *" # Runs every hour. Adjust as needed (e.g., '0 0 * * *' for daily)
  workflow_dispatch: # Allows manual triggering

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # This is important for the action to be able to commit changes
          token: ${{ secrets.GH_TOKEN }} # Use your PAT secret name here

      - name: Fetch and Generate Badges
        id: generate_badges
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GH_TOKEN }} # Use your PAT secret name here
          script: |
            const owner = 'chinmay-sawant';
            const repo = 'MotionSaver';
            const badgeDir = '.github/badges'; // Directory to store badges

            // Function to create an SVG badge with a "Linux type" dark theme
            function createBadgeSvg(label, message, color) {
                const labelLength = label.length;
                const messageLength = message.length;

                // Adjust width calculation for better fit with different fonts/sizes
                const labelWidth = labelLength * 7 + 10; // Adjusted for a slightly more compact look
                const messageWidth = messageLength * 7 + 10; // Adjusted for a slightly more compact look
                const totalWidth = labelWidth + messageWidth;

                // "Linux type" theme colors (inspired by Nord/Dracula/Gruvbox palettes)
                const primaryBgColor = '#3B4252'; // Dark gray-blue (Nord's `nord3`)
                const labelBgColor = '#4C566A';   // Slightly lighter gray-blue (Nord's `nord2`)
                const textColor = '#ECEFF4';      // Light almost-white (Nord's `nord6`)
                const shadowColor = '#2E3440';    // Darker shadow (Nord's `nord0`)

                return `
                    <svg xmlns="http://www.w3.org/2000/svg" width="${totalWidth}" height="20" role="img" aria-label="${label}: ${message}">
                        <title>${label}: ${message}</title>
                        <linearGradient id="s" x2="0" y2="100%">
                            <stop offset="0" stop-color="#bbb" stop-opacity=".1"/>
                            <stop offset="1" stop-opacity=".1"/>
                        </linearGradient>
                        <clipPath id="r"><rect width="${totalWidth}" height="20" rx="3" fill="#fff"/></clipPath>
                        <g clip-path="url(#r)">
                            <!-- Overall background for the badge -->
                            <rect width="${totalWidth}" height="20" fill="${primaryBgColor}"/>
                            <!-- Background for the label section -->
                            <rect width="${labelWidth}" height="20" fill="${labelBgColor}"/>
                            <!-- Background for the message section (uses dynamic color) -->
                            <rect x="${labelWidth}" width="${messageWidth}" height="20" fill="${color}"/>
                            <!-- Gradient overlay for subtle effect -->
                            <rect width="${totalWidth}" height="20" fill="url(#s)"/>
                        </g>
                        <g fill="${textColor}" text-anchor="middle" font-family="Verdana,Geneva,DejaVu Sans,sans-serif" text-rendering="geometricPrecision" font-size="110">
                            <!-- Shadow text for depth -->
                            <text aria-hidden="true" x="${(labelWidth / 2) * 10}" y="150" fill="${shadowColor}" fill-opacity=".3" transform="scale(.1)" textLength="${(labelWidth - 10) * 10}">${label}</text>
                            <!-- Main label text -->
                            <text x="${(labelWidth / 2) * 10}" y="140" transform="scale(.1)" textLength="${(labelWidth - 10) * 10}">${label}</text>
                            <!-- Shadow text for depth -->
                            <text aria-hidden="true" x="${(labelWidth + messageWidth / 2) * 10}" y="150" fill="${shadowColor}" fill-opacity=".3" transform="scale(.1)" textLength="${(messageWidth - 10) * 10}">${message}</text>
                            <!-- Main message text -->
                            <text x="${(labelWidth + messageWidth / 2) * 10}" y="140" transform="scale(.1)" textLength="${(messageWidth - 10) * 10}">${message}</text>
                        </g>
                    </svg>
                `;
            }

            try {
                // Fetch clones data using the correct method: github.rest.repos.getClones
                const clonesResponse = await github.rest.repos.getClones({
                    owner,
                    repo,
                    per: 'day' // Can be 'day' or 'week'
                });
                const totalClones = clonesResponse.data.count;
                const uniqueCloners = clonesResponse.data.uniques;

                // Fetch views data using the correct method: github.rest.repos.getViews
                const viewsResponse = await github.rest.repos.getViews({
                    owner,
                    repo,
                    per: 'day' // Can be 'day' or 'week'
                });
                const totalViews = viewsResponse.data.count;
                const uniqueVisitors = viewsResponse.data.uniques;

                // Generate SVG badges with theme-appropriate colors
                // Using a slightly desaturated green for clones and blue for views
                const clonesBadgeSvg = createBadgeSvg('Clones', `${totalClones} (Unique: ${uniqueCloners})`, '#8FBCBB'); // Nord's `nord7` (greenish-blue)
                const viewsBadgeSvg = createBadgeSvg('Views', `${totalViews} (Unique: ${uniqueVisitors})`, '#88C0D0'); // Nord's `nord8` (blue)

                // Create or update badge files
                await github.rest.repos.createOrUpdateFileContents({
                    owner,
                    repo,
                    path: `${badgeDir}/clones_badge.svg`,
                    message: 'feat: Update clones traffic badge',
                    content: Buffer.from(clonesBadgeSvg).toString('base64'),
                    sha: (await github.rest.repos.getContent({ owner, repo, path: `${badgeDir}/clones_badge.svg` }).catch(() => ({}))).data?.sha
                });

                await github.rest.repos.createOrUpdateFileContents({
                    owner,
                    repo,
                    path: `${badgeDir}/views_badge.svg`,
                    message: 'feat: Update views traffic badge',
                    content: Buffer.from(viewsBadgeSvg).toString('base64'),
                    sha: (await github.rest.repos.getContent({ owner, repo, path: `${badgeDir}/views_badge.svg` }).catch(() => ({}))).data?.sha
                });

                console.log('Traffic badges generated and committed successfully!');

            } catch (error) {
                console.error('Error fetching or generating traffic data:', error);
                core.setFailed(`Action failed with error: ${error.message}`);
            }

      - name: Commit generated badges (if not already committed by github-script)
        # This step is a fallback/redundant if createOrUpdateFileContents works correctly,
        # but useful for ensuring changes are pushed.
        uses: EndBug/add-and-commit@v9
        with:
          add: ".github/badges/*.svg"
          message: "Automated: Update GitHub traffic badges"
          committer_name: GitHub Actions
          committer_email: actions@github.com
          # Use the GITHUB_TOKEN provided by the workflow, which has write access
          token: ${{ secrets.GH_TOKEN }}
